---------Binary Search Tree (BST)----------

To search In simple tree => Time complexity is O(n)
To search In BST => Time complexity is O(h)
    where h = height of tree = log(n) in avg case
        log(n) for balanced trees

It is a binary tree with some additional properties
    - Left Subtree contains nodes less than root
    - Right Subtree contains nodes greater than root
    - Every Subtree is also a BST
    - No duplicates (I'm considering here)
    - There can be duplicates but then we have to handle them separately

------------Key Points----------
    - InOrder traversal of BST gives sorted Order
    
    - For Ascending Order:
        - left subtree + root + right subtree
    
    - For Descending Order:
        - right subtree + root + left subtree

    - Most problems of BST are solved by recursion
        - Divide the problem into subprobelm for subtrees

----------Building a BST-------------

nodes[] = { 5, 1, 3, 4, 2, 6 }

           5
         /   \
        1     6
          \
           3
         /   \
        2     4

-------------Insert a node in BST------------

Case-1  =>  if root is null
    - make the current node as root

Case-2  =>  if cuurent node value is less than root
    - attach the current node with left of root

Case-3  =>  if cuurent node value is greater than root
    - attach the current node with right of root


-------------Delete a node in BST------------

Case-1  =>  if target node is Leaf
    - Simply remove that leaf and return null

Case-2  =>  if target node has only one child
    - return that child and attach with root

Case-3  =>  if target node has 2 children
    - attach with inOrder successor (which has maximum 1 child)

inOrder successor = left most in right subtree
