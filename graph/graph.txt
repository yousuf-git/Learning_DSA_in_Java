-----------------Graph Data Structure----------------

    Cities Path in the form of graph:
        
        Multan ---- Lahore__    
       /                |   \
      Murree            |    Karachi ---- Islamabad
       \                |   /
        Peshawar ---- Quetta

-------------Vertex/Edge-------------------

There are 2 main things in graph:

- Vertex : Multan, Lahore, ... etc.
- Edge : (source, destination), like (Multan, Lahore) means path from multan to Lahore

-------------Directed/Undirected graphs-------------------

If there is specific direction to go from one vertex to other, then graph is called directed. Or if we can go to and from one vertex to other then graph is undirected

Directed => A --> B --> C --> A

Undirected => A -- B -- C -- A
    Can also be as => A <--> B <--> C <--> A (or bi-directional)

-------------Connected/Unconnected graphs-------------------

Suppose if I add (A,B) and (B,A) for all edges it means that graph is undirected, we can go in both directions

If all edges of graph are connected through some path then graph is connected and otherwise it is un-connected. Consider 2 separate graphs, these will be unconnected because not all edges are connected
Example:
    G1 : A -- B -- C
    G1 : D -- E

    G1 and G2 are individually connected graphs but if we see them both combined as a single graph then it is an unconnected graph

---------------------
------------Temp Comment----------------

/**
I've implemented graph in this class with generic type of vertices (T)
Fully connected / unconnected, directed / undirected graphs are handled in this single class in a general way
You just have to ensure that you are passing the right edges while building the graph 
Implemented some methods both for connected and un-connected graphs separately, in order to let you understand the difference between them
General methods work well for both connected and unconncted graph so try to use them in most cases

_______________Contains following methods______________

01. buildConGraph(ArrayList<Edge<T>> edges) : Specially for connected graphs building with list of edges

02. buildGraph(ArrayList<Edge<T>> edges) : For general connected / unconnected graphs building

03. addVertex(T vertex): To add a vertex of generic type 

04. addEdge(Edges<T> edge) : To add an edge and ensure that source and destination are themselves added as vertex 

05. findNbrs(T vertex) : To Display All the neighbours of a given vertex

06. bfsCon(T start) / dfsCon(T start, Set<T> visited) : Special for traversal in connected graphs 

07. bfs(T start) / dfs(T start, Set<T> visited) : Traversal in general graphs 

08. printPath(T src, T dest) : To print all possible paths from given source to destination vertex 

09. topologicalSort(T start) : Returns ArrayList of vertices in topologically sorted order 

10. hasCycleUnd() : Returns true if there is cycle in the undirected graph, false otherwise 

11. hasCycleDir() : Returns true if there is cycle in the directed graph, false otherwise 

12. getShortestPaths(T source) : Returns a HashMap<T, Integer> that contains vertices as keys and value refers to minimum cost/weights from source to those vertices using dijkstra's algorithm

13. getShortestPaths(T source) : Returns a HashMap<T, Integer> that contains vertices as keys and value refers to minimum cost/weights from source to those vertices using Bellman Ford algorithm

14. mst(T start) : Returns ArrayList of edges included in MST for the given graph, using Prim's Algorithm

15. getStronglyConComps(T start) : Returns ArrayList<ArrayList<T>> List of List of stromgly component vise vertices by implementing Kosaraju's Algorithm

16. reverse() : Returns Graph<T>, that is transpose / reverse of original one (reverse the direction of all edges)

17. printEdges() : Simply prints all edges in graph in the form of source --> destination

 * 
 */


Functions Performed on Graph:

1. Creating Graph - weighted / unwieghted 
2. Finding all neighbours of a vertex
3. BFS / DFS for connected and unconnected graph
4. Finding All Paths from source to destination
5. Topological Sorting
6. Cycle Detection for directed / undirected graphs
7. Bellman Ford / Dijkstra's Algorithm for shortest path finding from source to all vertices

Graph can be Implemented by:

1. Adjacency List -> List of List
        I'll be creating Array[] of ArrayList, 
        where size of array will be No. Of Vertices

2. Adjacency Matrix -> A(n x n)
    where a(ij) = 1 if there is path from i to j, 0 otherwise

3. Edge List
    A single list containing all edges

4. 2D Matrix (Implicit Graph)

---------Implementation Structure-------------

ArrayList<Edge>[n] graph; // n is number of edges
HashMap<T, ArrayList<Edge>> graph; // keys are vertices and each vertex has an ArrayList that contains all edges directly connected to it

class Edge<Type, Type_2(if any)> {
    Type src;
    Type dest;
    Type_2 weight; // if graph is weighted
}

To Acceess all the neighbours of a vertex, we can directly access it by its index.
graph[vertexIdx] gives an ArrayList that contains exactly all its neighbours

for (Edge edge : ArrayList) {
    edge.src; // source vertex itself
    edge.dest; // neighbour
}

Time Complexity = O(n) where n is number of neighbours
which is quite low, thats why we use Adjacency List

-------------Graph Traversal--------------

- Depth First Search (DFS)
- Bredth First Search (BFS)

BFS:
    Also called Level Order Traversal
    Give Priority to immediate neighbours First
    Example:

        A --- B --- D --- E
        |           |     / 
        C --- F      \   /
                       G

    In this graph if we are applying BFS and choose A as start
    Suppose Step 1: A --> B then
    Before going from B --> D, First goto C

    I'll be using a queue and a set visited to Implement BFS on graph, that includes 3 steps
        1. Print current vertex
        2. Add All the neighbours of current vertex in queue
        3. Remove the current vertex and mark it as visited
    
    Time Complexity O (V+E) 
        if V is very large => O(V)
        if E is very large => O(E)

    Example Graph:

        1 ---- 3    
       /       | \
      0        |   5 ---- 6
       \       | /
        2 ---- 4
    
    BFS should result in : 0 1 2 3 4 5 6

DFS:
    DFS should result in : 0 1 3 4 2 5 6



----------------------Topological Sorting----------------------

- Applicable for DAG (Directed Acyclic Graph)
- For every vertex (u,v), in topological sorted order u should come before v
- Linear Time Complexity O(n)
- Not unique, there can be many topological sorted orders

Example: Directed Graph V(G) = { (B,A), (B,D), (A,D), (D,C) }
            A
          / |
        B   |   C
            v  /
            D

Topological Sort: B, A, D, C
                  B, D, A, C      // wrong because A comes before D in edge (A, D)

Can be done by BFS / DFS, I'm doing by DFS here

----------Steps-------------

1. Start visiting the univisited edges one by one and apply DFS
2. When there is no neighbour left, put the current vertex into a common stack
3. At the end when all vertices are visited, pop all elements from the stack

Time Complexity = O (V + E)

----------------Cycle Detection---------------

1. For Undirected Graph
    - DFS / BFS
    - DSU (Disjoint Graph Union)


2. For Directed Graph
    - DFS / BFS
    - Topological Sort (Kahn's Algorithm)

________________Shortest Path Algorithms________________

These all are same for weighted graph:
 - Shortest Path / Shortest Distance / Minimum Cost  / Minimum Weight

-------------------Dijkstra's Algorithm---------------
 - Uses Greedy approach
 - Uses BFS approach (by using Priority Queue)

=> Time Complexity Analysis: 𝑂((𝑉 + 𝐸) log 𝑉)
 
 Let's break down the time complexity of the Dijkstra's algorithm implementation:

Initialization:

 - The initialization of the costs map takes 𝑂(𝑉) where 𝑉 is the number of vertices.
 - The creation and initialization of the priority queue 𝑂(1)

Priority Queue Operations:

 - Adding all vertices to the priority queue in the worst case would take  𝑂(𝐸 log 𝑉) as each vertex is added at most once for each edge.
 - Removing the minimum element from the priority queue takes 𝑂(log𝑉) and this operation is performed once for each vertex, resulting in a total of 𝑂(𝑉 log⁡ 𝑉)

Edge Relaxation:

 - The edge relaxation step involves checking and updating the shortest path estimates, which in the worst case will occur 𝑂(𝐸) times. Each relaxation operation involves a priority queue update (insert), costing 
𝑂(log 𝑉) Hence, this step takes 𝑂(𝐸 log 𝑉)

Total Time Complexity: 
    𝑂((𝑉 + 𝐸) log 𝑉)𝑂((𝑉 + 𝐸) log 𝑉)

Disadvantage:
 - Not Valid for Negative weights
 - Not Valid for cyclic graphs

-----------------Bellman Ford Algorithm-----------------

Uses Dynamic Programming
Perform Relaxation for all edges V-1 times

+ Can be Applied on cyclic and negative weighted graph
- Can not be used for graph if there is Negative weight cycle
    The total weight of edges included in cycle, must be +ve

Time Complexity Analysis: 𝑂(𝑉𝐸)

 - Initialization:

Initializing the costs HashMap with all vertices: This takes O(V) time, where V is the number of vertices.

 - Main Loop:

The outer loop runs V−1 times, where V is the number of vertices. This is because the Bellman-Ford algorithm requires V−1 iterations to ensure that the shortest path is found, even in the worst case.
The inner loop iterates over each vertex V, and for each vertex, it iterates over its edges. Assuming E is the number of edges in the graph, this inner loop can take O(E) time because each vertex might have several edges.

 - Putting it all together:

The outer loop runs V−1 times.
For each iteration of the outer loop, the inner loop processes all edges, taking O(E) time.
Therefore, the overall time complexity of the algorithm is:
 O(V)+(V−1)×O(E)
 = O(V+VE)

Since V is typically much smaller than VE, the dominant term is VE. Thus, the time complexity simplifies to:
 - 𝑂(𝑉𝐸)

--------------Prim's Algorithm------------------

Used to find Minimum Spannin Tree (MST)
Note: There There can be multiple minimum spanning trees (MSTs) for a given edge-weighted graph

MST properties:
    - Contains each Vertex of original graph
    - Has Minimum edge weight
    - Doesn't have any cycle

Start from an arbitrary vertex and choose minimum weight neighbour (Use Priority Queue to store edges, it will automatically sort the edges based on their minimum weight)

Time Complexity Breakdown:
 - Initialization:

Adding the start node to the priority queue: O(log 1) = O(1).
 
 - Processing Each Vertex:

Each vertex is processed once when it is removed from the priority queue.
Removing a vertex from the priority queue: O(log V).
 
 - Processing Each Edge:

For each vertex, all its adjacent edges are examined.
Adding an edge to the priority queue: O(log V).

 - Total Complexity:

Each vertex is inserted and removed from the priority queue exactly once, leading to a complexity of O(V log V) for these operations.

Each edge is examined once, and for each edge, there may be an insertion into the priority queue, leading to a complexity of O(E log V) for these operations.

 - Combined Complexity:

The overall time complexity of the algorithm is dominated by the priority queue operations. Therefore, the combined complexity is:

    O((V+E) log V) = O(E log V)

--------------Kosaraju's Algorithm------------------

Used to find all the strongly connected components
A part of graph (set of vertices) makes strongly connected component if there is path from each vertex to every other vertex

Steps:
    1. Apply topological sort on the graph (Get the List of edges in topological order)
    2. Reverse the graph (reverse the direction of all edges in graph)
    3. Apply DFS on the vertices of reversed graph but in accordance of topological sorted list
        Each time a new vertex is visited, it will be a new component
    4. Repeat the process until all vertices are visited
    5. Return the components

Time Complexity: O(V+E)
Analysis:
    Topological Sorting: O(V + E)
    Reversing the graph: O(V + E)
    DFS: O(V + E)
    Total = 3 * O(V + E) = O(V + E)